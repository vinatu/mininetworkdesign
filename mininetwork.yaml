AWSTemplateFormatVersion: '2010-09-09'
Description: Creating a mini network design.

Resources:
  MNVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'

  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MNVPC
      AvailabilityZone: 'eu-west-1a'
      CidrBlock: '10.0.0.0/24'
      MapPublicIpOnLaunch: true  # Assign public IPs
      Tags:
        - Key: 'Name'
          Value: 'Public Subnet A'

  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MNVPC
      AvailabilityZone: 'eu-west-1b'
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true  # Assign public IPs
      Tags:
        - Key: 'Name'
          Value: 'Public Subnet B'

  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MNVPC
      AvailabilityZone: 'eu-west-1a'
      CidrBlock: '10.0.2.0/24'
      Tags:
        - Key: 'Name'
          Value: 'Private Subnet A'

  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MNVPC
      AvailabilityZone: 'eu-west-1b'
      CidrBlock: '10.0.3.0/24'
      Tags:
        - Key: 'Name'
          Value: 'Private Subnet B'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MNVPC
      InternetGatewayId: !Ref InternetGateway

  # Define your route tables and associations as before

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow SSH and HTTP traffic'
      VpcId: !Ref MNVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'

  EC2InstanceJ:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      SubnetId: !Ref PublicSubnetA
      KeyName: 'mininetwork-ssh-key'
      ImageId: 'ami-0694d931cee176e7d'

  EC2InstanceA:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      SubnetId: !Ref PrivateSubnetA
      KeyName: 'mininetwork-ssh-key'
      ImageId: 'ami-0694d931cee176e7d' 

  EC2InstanceB:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      SubnetId: !Ref PublicSubnetB
      KeyName: 'mininetwork-ssh-key'
      ImageId: 'ami-0694d931cee176e7d'      

  EC2InstanceF:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      SubnetId: !Ref PrivateSubnetB
      KeyName: 'mininetwork-ssh-key'
      ImageId: 'ami-0694d931cee176e7d'

Outputs:
  PublicSubnetAId:
    Description: 'public subnet A of mini-network'
    Value: !Ref PublicSubnetA

  PublicSubnetBId:
    Description: 'public subnet B of mini-network'
    Value: !Ref PublicSubnetB

  PrivateSubnetAId:
    Description: 'private subnet A of mini-network'
    Value: !Ref PrivateSubnetA

  PrivateSubnetBId:
    Description: 'private subnet B of mini-network'
    Value: !Ref PrivateSubnetB
