AWSTemplateFormatVersion: '2010-09-09'
Description: Creating a mini network design.

Resources:
  MNVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true   # Enable DNS resolution
      EnableDnsHostnames: true # Enable DNS hostnames

  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MNVPC
      AvailabilityZone: 'eu-west-1a'
      CidrBlock: '10.0.0.0/24'
      MapPublicIpOnLaunch: true  
      Tags:
        - Key: 'Name'
          Value: 'Public Subnet A'

  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MNVPC
      AvailabilityZone: 'eu-west-1b'
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true  
      Tags:
        - Key: 'Name'
          Value: 'Public Subnet B'

  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MNVPC
      AvailabilityZone: 'eu-west-1a'
      CidrBlock: '10.0.2.0/24'
      Tags:
        - Key: 'Name'
          Value: 'Private Subnet A'

  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MNVPC
      AvailabilityZone: 'eu-west-1b'
      CidrBlock: '10.0.3.0/24'
      Tags:
        - Key: 'Name'
          Value: 'Private Subnet B'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MNVPC
      InternetGatewayId: !Ref InternetGateway

  EIPPublicSubnetA:
    Type: 'AWS::EC2::EIP'

  EIPPublicSubnetB:
    Type: 'AWS::EC2::EIP'

  # NAT Gateway
  NatGatewayA:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      SubnetId: !Ref PublicSubnetA
      AllocationId:
        Fn::GetAtt:
          - EIPPublicSubnetA
          - AllocationId
    DependsOn: AttachGateway

  NatGatewayB:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      SubnetId: !Ref PublicSubnetB
      AllocationId:
        Fn::GetAtt:
          - EIPPublicSubnetB
          - AllocationId
    DependsOn: AttachGateway

  RouteTablePublicA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MNVPC

  RouteTablePublicB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MNVPC

  RouteTablePrivateA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MNVPC

  RouteTablePrivateB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MNVPC

  RouteTableAssociationPublicA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref RouteTablePublicA

  RouteTableAssociationPublicB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref RouteTablePublicB

  RouteTableAssociationPrivateA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref RouteTablePrivateA

  RouteTableAssociationPrivateB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref RouteTablePrivateB

  RouteToInternetGatewayA:    #internet gateway to public 
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicA
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  RouteToInternetGatewayB:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicB
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway


  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref MNVPC

  InboundRulePublic:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'

  OutboundRulePublic:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 200
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref MNVPC

  InboundRulePrivate:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'

  OutboundRulePrivate:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 200
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'      

  SecurityGroupPublic:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow SSH and HTTP traffic for Public Instances'
      VpcId: !Ref MNVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'  # Allow SSH from anywhere
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'  # Allow HTTP from anywhere

  SecurityGroupPrivate:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow SSH traffic for Private Instances'
      VpcId: !Ref MNVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SecurityGroupPublic  # Allow SSH from SecurityGroupPublic

  #EC2 instances
  EC2InstanceJ:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: ami-0694d931cee176e7d
      KeyName: 'mininetwork-ssh-key'
      NetworkInterfaces:
        - GroupSet:
           - !Ref SecurityGroupPublic
          SubnetId: !Ref PublicSubnetA
          DeviceIndex: 0
      

  EC2InstanceA:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      KeyName: 'mininetwork-ssh-key'
      ImageId: 'ami-0694d931cee176e7d' 
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroupPrivate
          SubnetId: !Ref PrivateSubnetA
          DeviceIndex: 0
      UserData:
        Fn::Base64: !Sub |                  # added sql 
          #!/bin/bash
          yum update -y
          yum install -y mysql-server
          service mysqld start
          mysql -e "CREATE DATABASE mydatabase;"
          # You might want to add additional commands to create tables, users, etc.


  EC2InstanceB:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      KeyName: 'mininetwork-ssh-key'
      ImageId: 'ami-0694d931cee176e7d'  
      NetworkInterfaces:
        - GroupSet:
           - !Ref SecurityGroupPrivate
          SubnetId: !Ref PrivateSubnetB
          DeviceIndex: 0    

  EC2InstanceF:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      KeyName: 'mininetwork-ssh-key'
      ImageId: 'ami-0694d931cee176e7d'
      NetworkInterfaces:
        - GroupSet:
          - !Ref SecurityGroupPublic
          SubnetId: !Ref PublicSubnetA
          DeviceIndex: 0     

  RouteToNATA:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivateA
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayA

  RouteToNATB:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivateB
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayB

Outputs:
  PublicSubnetAId:
    Description: 'public subnet A of mini-network'
    Value: !Ref PublicSubnetA

  PublicSubnetBId:
    Description: 'public subnet B of mini-network'
    Value: !Ref PublicSubnetB

  PrivateSubnetAId:
    Description: 'private subnet A of mini-network'
    Value: !Ref PrivateSubnetA

  PrivateSubnetBId:
    Description: 'private subnet B of mini-network'
    Value: !Ref PrivateSubnetB